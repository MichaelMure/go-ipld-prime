package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _TypeList struct {
	valueType _TypeNameOrInlineDefn
	valueNullable _Bool
	representation _ListRepresentation
}
type TypeList = *_TypeList

func (n _TypeList) FieldValueType()	TypeNameOrInlineDefn {
	return &n.valueType
}
func (n _TypeList) FieldValueNullable()	Bool {
	return &n.valueNullable
}
func (n _TypeList) FieldRepresentation()	ListRepresentation {
	return &n.representation
}
type _TypeList__Maybe struct {
	m schema.Maybe
	v TypeList
}
type MaybeTypeList = *_TypeList__Maybe

func (m MaybeTypeList) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTypeList) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTypeList) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTypeList) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTypeList) Must() TypeList {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__TypeList_ValueType = _String{"valueType"}
	fieldName__TypeList_ValueNullable = _String{"valueNullable"}
	fieldName__TypeList_Representation = _String{"representation"}
)
var _ ipld.Node = (TypeList)(&_TypeList{})
var _ schema.TypedNode = (TypeList)(&_TypeList{})
func (TypeList) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n TypeList) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "valueType":
		return &n.valueType, nil
	case "valueNullable":
		return &n.valueNullable, nil
	case "representation":
		return &n.representation, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n TypeList) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (TypeList) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeList"}.LookupByIndex(0)
}
func (n TypeList) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n TypeList) MapIterator() ipld.MapIterator {
	return &_TypeList__MapItr{n, 0}
}

type _TypeList__MapItr struct {
	n TypeList
	idx  int
}

func (itr *_TypeList__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__TypeList_ValueType
		v = &itr.n.valueType
	case 1:
		k = &fieldName__TypeList_ValueNullable
		v = &itr.n.valueNullable
	case 2:
		k = &fieldName__TypeList_Representation
		v = &itr.n.representation
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeList__MapItr) Done() bool {
	return itr.idx >= 3
}

func (TypeList) ListIterator() ipld.ListIterator {
	return nil
}
func (TypeList) Length() int {
	return 3
}
func (TypeList) IsAbsent() bool {
	return false
}
func (TypeList) IsNull() bool {
	return false
}
func (TypeList) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeList"}.AsBool()
}
func (TypeList) AsInt() (int, error) {
	return mixins.Map{"schema.TypeList"}.AsInt()
}
func (TypeList) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeList"}.AsFloat()
}
func (TypeList) AsString() (string, error) {
	return mixins.Map{"schema.TypeList"}.AsString()
}
func (TypeList) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeList"}.AsBytes()
}
func (TypeList) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeList"}.AsLink()
}
func (TypeList) Prototype() ipld.NodePrototype {
	return _TypeList__Prototype{}
}
type _TypeList__Prototype struct{}

func (_TypeList__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeList__Builder
	nb.Reset()
	return &nb
}
type _TypeList__Builder struct {
	_TypeList__Assembler
}
func (nb *_TypeList__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeList__Builder) Reset() {
	var w _TypeList
	var m schema.Maybe
	*nb = _TypeList__Builder{_TypeList__Assembler{w: &w, m: &m}}
}
type _TypeList__Assembler struct {
	w *_TypeList
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_valueType _TypeNameOrInlineDefn__Assembler
	ca_valueNullable _Bool__Assembler
	ca_representation _ListRepresentation__Assembler
	}

func (na *_TypeList__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_valueType.reset()
	na.ca_valueNullable.reset()
	na.ca_representation.reset()
}

var (
	fieldBit__TypeList_ValueType = 1 << 0
	fieldBit__TypeList_ValueNullable = 1 << 1
	fieldBit__TypeList_Representation = 1 << 2
	fieldBits__TypeList_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2
)
func (na *_TypeList__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeList{}
	}
	return na, nil
}
func (_TypeList__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeList"}.BeginList(0)
}
func (na *_TypeList__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeList"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeList__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignBool(false)
}
func (_TypeList__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignInt(0)
}
func (_TypeList__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignFloat(0)
}
func (_TypeList__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignString("")
}
func (_TypeList__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignBytes(nil)
}
func (_TypeList__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeList"}.AssignLink(nil)
}
func (na *_TypeList__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeList); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeList", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeList__Assembler) Prototype() ipld.NodePrototype {
	return _TypeList__Prototype{}
}
func (ma *_TypeList__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_valueType.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_valueNullable.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_representation.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_TypeList__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "valueType":
		if ma.s & fieldBit__TypeList_ValueType != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueType}
		}
		ma.s += fieldBit__TypeList_ValueType
		ma.state = maState_midValue
		ma.ca_valueType.w = &ma.w.valueType
		ma.ca_valueType.m = &ma.cm
		return &ma.ca_valueType, nil
	case "valueNullable":
		if ma.s & fieldBit__TypeList_ValueNullable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueNullable}
		}
		ma.s += fieldBit__TypeList_ValueNullable
		ma.state = maState_midValue
		ma.ca_valueNullable.w = &ma.w.valueNullable
		ma.ca_valueNullable.m = &ma.cm
		return &ma.ca_valueNullable, nil
	case "representation":
		if ma.s & fieldBit__TypeList_Representation != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_Representation}
		}
		ma.s += fieldBit__TypeList_Representation
		ma.state = maState_midValue
		ma.ca_representation.w = &ma.w.representation
		ma.ca_representation.m = &ma.cm
		return &ma.ca_representation, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeList", Key:&_String{k}}
	}
}
func (ma *_TypeList__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeList__KeyAssembler)(ma)
}
func (ma *_TypeList__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_valueType.w = &ma.w.valueType
		ma.ca_valueType.m = &ma.cm
		return &ma.ca_valueType
	case 1:
		ma.ca_valueNullable.w = &ma.w.valueNullable
		ma.ca_valueNullable.m = &ma.cm
		return &ma.ca_valueNullable
	case 2:
		ma.ca_representation.w = &ma.w.representation
		ma.ca_representation.m = &ma.cm
		return &ma.ca_representation
	default:
		panic("unreachable")
	}
}
func (ma *_TypeList__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeList__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeList__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _TypeList__KeyAssembler _TypeList__Assembler
func (_TypeList__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.BeginMap(0)
}
func (_TypeList__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.BeginList(0)
}
func (na *_TypeList__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignNull()
}
func (_TypeList__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignBool(false)
}
func (_TypeList__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignInt(0)
}
func (_TypeList__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeList__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "valueType":
		if ka.s & fieldBit__TypeList_ValueType != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueType}
		}
		ka.s += fieldBit__TypeList_ValueType
		ka.state = maState_expectValue
		ka.f = 0
	case "valueNullable":
		if ka.s & fieldBit__TypeList_ValueNullable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueNullable}
		}
		ka.s += fieldBit__TypeList_ValueNullable
		ka.state = maState_expectValue
		ka.f = 1
	case "representation":
		if ka.s & fieldBit__TypeList_Representation != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_Representation}
		}
		ka.s += fieldBit__TypeList_Representation
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeList", Key:&_String{k}}
	}
	return nil
}
func (_TypeList__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeList__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeList.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeList__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeList__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (TypeList) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n TypeList) Representation() ipld.Node {
	return (*_TypeList__Repr)(n)
}
type _TypeList__Repr _TypeList
var (
	fieldName__TypeList_ValueType_serial = _String{"valueType"}
	fieldName__TypeList_ValueNullable_serial = _String{"valueNullable"}
	fieldName__TypeList_Representation_serial = _String{"representation"}
)
var _ ipld.Node = &_TypeList__Repr{}
func (_TypeList__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_TypeList__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "valueType":
		return n.valueType.Representation(), nil
	case "valueNullable":
		return n.valueNullable.Representation(), nil
	case "representation":
		return n.representation.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_TypeList__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_TypeList__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeList.Repr"}.LookupByIndex(0)
}
func (n _TypeList__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_TypeList__Repr) MapIterator() ipld.MapIterator {
	return &_TypeList__ReprMapItr{n, 0}
}

type _TypeList__ReprMapItr struct {
	n   *_TypeList__Repr
	idx int
	
}

func (itr *_TypeList__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__TypeList_ValueType_serial
		v = itr.n.valueType.Representation()
	case 1:
		k = &fieldName__TypeList_ValueNullable_serial
		v = itr.n.valueNullable.Representation()
	case 2:
		k = &fieldName__TypeList_Representation_serial
		v = itr.n.representation.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeList__ReprMapItr) Done() bool {
	return itr.idx >= 3
}
func (_TypeList__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_TypeList__Repr) Length() int {
	l := 3
	return l
}
func (_TypeList__Repr) IsAbsent() bool {
	return false
}
func (_TypeList__Repr) IsNull() bool {
	return false
}
func (_TypeList__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsBool()
}
func (_TypeList__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsInt()
}
func (_TypeList__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsFloat()
}
func (_TypeList__Repr) AsString() (string, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsString()
}
func (_TypeList__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsBytes()
}
func (_TypeList__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeList.Repr"}.AsLink()
}
func (_TypeList__Repr) Prototype() ipld.NodePrototype {
	return _TypeList__ReprPrototype{}
}
type _TypeList__ReprPrototype struct{}

func (_TypeList__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeList__ReprBuilder
	nb.Reset()
	return &nb
}
type _TypeList__ReprBuilder struct {
	_TypeList__ReprAssembler
}
func (nb *_TypeList__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeList__ReprBuilder) Reset() {
	var w _TypeList
	var m schema.Maybe
	*nb = _TypeList__ReprBuilder{_TypeList__ReprAssembler{w: &w, m: &m}}
}
type _TypeList__ReprAssembler struct {
	w *_TypeList
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_valueType _TypeNameOrInlineDefn__ReprAssembler
	ca_valueNullable _Bool__ReprAssembler
	ca_representation _ListRepresentation__ReprAssembler
	}

func (na *_TypeList__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_valueType.reset()
	na.ca_valueNullable.reset()
	na.ca_representation.reset()
}
func (na *_TypeList__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeList{}
	}
	return na, nil
}
func (_TypeList__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.BeginList(0)
}
func (na *_TypeList__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeList.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeList__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignBool(false)
}
func (_TypeList__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignInt(0)
}
func (_TypeList__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignFloat(0)
}
func (_TypeList__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignString("")
}
func (_TypeList__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignBytes(nil)
}
func (_TypeList__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeList.Repr"}.AssignLink(nil)
}
func (na *_TypeList__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeList); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeList.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeList__ReprAssembler) Prototype() ipld.NodePrototype {
	return _TypeList__ReprPrototype{}
}
func (ma *_TypeList__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_TypeList__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "valueType":
		if ma.s & fieldBit__TypeList_ValueType != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueType_serial}
		}
		ma.s += fieldBit__TypeList_ValueType
		ma.state = maState_midValue
		ma.ca_valueType.w = &ma.w.valueType
		ma.ca_valueType.m = &ma.cm
		return &ma.ca_valueType, nil
	case "valueNullable":
		if ma.s & fieldBit__TypeList_ValueNullable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueNullable_serial}
		}
		ma.s += fieldBit__TypeList_ValueNullable
		ma.state = maState_midValue
		ma.ca_valueNullable.w = &ma.w.valueNullable
		ma.ca_valueNullable.m = &ma.cm
		return &ma.ca_valueNullable, nil
	case "representation":
		if ma.s & fieldBit__TypeList_Representation != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TypeList_Representation_serial}
		}
		ma.s += fieldBit__TypeList_Representation
		ma.state = maState_midValue
		ma.ca_representation.w = &ma.w.representation
		ma.ca_representation.m = &ma.cm
		return &ma.ca_representation, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeList.Repr", Key:&_String{k}}
	}
}
func (ma *_TypeList__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeList__ReprKeyAssembler)(ma)
}
func (ma *_TypeList__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_valueType.w = &ma.w.valueType
		ma.ca_valueType.m = &ma.cm
		return &ma.ca_valueType
	case 1:
		ma.ca_valueNullable.w = &ma.w.valueNullable
		ma.ca_valueNullable.m = &ma.cm
		return &ma.ca_valueNullable
	case 2:
		ma.ca_representation.w = &ma.w.representation
		ma.ca_representation.m = &ma.cm
		return &ma.ca_representation
	default:
		panic("unreachable")
	}
}
func (ma *_TypeList__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeList__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeList__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _TypeList__ReprKeyAssembler _TypeList__ReprAssembler
func (_TypeList__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.BeginMap(0)
}
func (_TypeList__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_TypeList__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignNull()
}
func (_TypeList__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignBool(false)
}
func (_TypeList__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignInt(0)
}
func (_TypeList__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeList__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "valueType":
		if ka.s & fieldBit__TypeList_ValueType != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueType_serial}
		}
		ka.s += fieldBit__TypeList_ValueType
		ka.state = maState_expectValue
		ka.f = 0
	case "valueNullable":
		if ka.s & fieldBit__TypeList_ValueNullable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_ValueNullable_serial}
		}
		ka.s += fieldBit__TypeList_ValueNullable
		ka.state = maState_expectValue
		ka.f = 1
	case "representation":
		if ka.s & fieldBit__TypeList_Representation != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TypeList_Representation_serial}
		}
		ka.s += fieldBit__TypeList_Representation
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeList.Repr", Key:&_String{k}}
	}
	return nil
}
func (_TypeList__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeList__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeList.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeList__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeList__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
