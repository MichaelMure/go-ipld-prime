package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _TypeInt struct {
}
type TypeInt = *_TypeInt

type _TypeInt__Maybe struct {
	m schema.Maybe
	v TypeInt
}
type MaybeTypeInt = *_TypeInt__Maybe

func (m MaybeTypeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTypeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTypeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTypeInt) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTypeInt) Must() TypeInt {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
)
var _ ipld.Node = (TypeInt)(&_TypeInt{})
var _ schema.TypedNode = (TypeInt)(&_TypeInt{})
func (TypeInt) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n TypeInt) LookupByString(key string) (ipld.Node, error) {
	switch key {
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n TypeInt) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (TypeInt) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeInt"}.LookupByIndex(0)
}
func (n TypeInt) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n TypeInt) MapIterator() ipld.MapIterator {
	return &_TypeInt__MapItr{n, 0}
}

type _TypeInt__MapItr struct {
	n TypeInt
	idx  int
}

func (itr *_TypeInt__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 0 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeInt__MapItr) Done() bool {
	return itr.idx >= 0
}

func (TypeInt) ListIterator() ipld.ListIterator {
	return nil
}
func (TypeInt) Length() int {
	return 0
}
func (TypeInt) IsAbsent() bool {
	return false
}
func (TypeInt) IsNull() bool {
	return false
}
func (TypeInt) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeInt"}.AsBool()
}
func (TypeInt) AsInt() (int, error) {
	return mixins.Map{"schema.TypeInt"}.AsInt()
}
func (TypeInt) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeInt"}.AsFloat()
}
func (TypeInt) AsString() (string, error) {
	return mixins.Map{"schema.TypeInt"}.AsString()
}
func (TypeInt) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeInt"}.AsBytes()
}
func (TypeInt) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeInt"}.AsLink()
}
func (TypeInt) Prototype() ipld.NodePrototype {
	return _TypeInt__Prototype{}
}
type _TypeInt__Prototype struct{}

func (_TypeInt__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeInt__Builder
	nb.Reset()
	return &nb
}
type _TypeInt__Builder struct {
	_TypeInt__Assembler
}
func (nb *_TypeInt__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeInt__Builder) Reset() {
	var w _TypeInt
	var m schema.Maybe
	*nb = _TypeInt__Builder{_TypeInt__Assembler{w: &w, m: &m}}
}
type _TypeInt__Assembler struct {
	w *_TypeInt
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	}

func (na *_TypeInt__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
}

var (
	fieldBits__TypeInt_sufficient = 0
)
func (na *_TypeInt__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeInt{}
	}
	return na, nil
}
func (_TypeInt__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeInt"}.BeginList(0)
}
func (na *_TypeInt__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeInt"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeInt__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignBool(false)
}
func (_TypeInt__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignInt(0)
}
func (_TypeInt__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignFloat(0)
}
func (_TypeInt__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignString("")
}
func (_TypeInt__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignBytes(nil)
}
func (_TypeInt__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeInt"}.AssignLink(nil)
}
func (na *_TypeInt__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeInt); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeInt", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeInt__Assembler) Prototype() ipld.NodePrototype {
	return _TypeInt__Prototype{}
}
func (ma *_TypeInt__Assembler) valueFinishTidy() bool {
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeInt__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeInt", Key:&_String{k}}
	}
}
func (ma *_TypeInt__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeInt__KeyAssembler)(ma)
}
func (ma *_TypeInt__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeInt__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeInt__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeInt__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _TypeInt__KeyAssembler _TypeInt__Assembler
func (_TypeInt__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.BeginMap(0)
}
func (_TypeInt__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.BeginList(0)
}
func (na *_TypeInt__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignNull()
}
func (_TypeInt__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignBool(false)
}
func (_TypeInt__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignInt(0)
}
func (_TypeInt__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeInt__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeInt", Key:&_String{k}}
	}
	return nil
}
func (_TypeInt__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeInt__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeInt.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeInt__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeInt__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (TypeInt) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n TypeInt) Representation() ipld.Node {
	return (*_TypeInt__Repr)(n)
}
type _TypeInt__Repr _TypeInt
var (
)
var _ ipld.Node = &_TypeInt__Repr{}
func (_TypeInt__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_TypeInt__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_TypeInt__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_TypeInt__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.LookupByIndex(0)
}
func (n _TypeInt__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_TypeInt__Repr) MapIterator() ipld.MapIterator {
	return &_TypeInt__ReprMapItr{n, 0}
}

type _TypeInt__ReprMapItr struct {
	n   *_TypeInt__Repr
	idx int
	
}

func (itr *_TypeInt__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
if itr.idx >= 0 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeInt__ReprMapItr) Done() bool {
	return itr.idx >= 0
}
func (_TypeInt__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_TypeInt__Repr) Length() int {
	l := 0
	return l
}
func (_TypeInt__Repr) IsAbsent() bool {
	return false
}
func (_TypeInt__Repr) IsNull() bool {
	return false
}
func (_TypeInt__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsBool()
}
func (_TypeInt__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsInt()
}
func (_TypeInt__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsFloat()
}
func (_TypeInt__Repr) AsString() (string, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsString()
}
func (_TypeInt__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsBytes()
}
func (_TypeInt__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeInt.Repr"}.AsLink()
}
func (_TypeInt__Repr) Prototype() ipld.NodePrototype {
	return _TypeInt__ReprPrototype{}
}
type _TypeInt__ReprPrototype struct{}

func (_TypeInt__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeInt__ReprBuilder
	nb.Reset()
	return &nb
}
type _TypeInt__ReprBuilder struct {
	_TypeInt__ReprAssembler
}
func (nb *_TypeInt__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeInt__ReprBuilder) Reset() {
	var w _TypeInt
	var m schema.Maybe
	*nb = _TypeInt__ReprBuilder{_TypeInt__ReprAssembler{w: &w, m: &m}}
}
type _TypeInt__ReprAssembler struct {
	w *_TypeInt
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	}

func (na *_TypeInt__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
}
func (na *_TypeInt__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeInt{}
	}
	return na, nil
}
func (_TypeInt__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.BeginList(0)
}
func (na *_TypeInt__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeInt.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeInt__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignBool(false)
}
func (_TypeInt__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignInt(0)
}
func (_TypeInt__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignFloat(0)
}
func (_TypeInt__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignString("")
}
func (_TypeInt__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignBytes(nil)
}
func (_TypeInt__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeInt.Repr"}.AssignLink(nil)
}
func (na *_TypeInt__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeInt); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeInt.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeInt__ReprAssembler) Prototype() ipld.NodePrototype {
	return _TypeInt__ReprPrototype{}
}
func (ma *_TypeInt__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeInt__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeInt.Repr", Key:&_String{k}}
	}
}
func (ma *_TypeInt__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeInt__ReprKeyAssembler)(ma)
}
func (ma *_TypeInt__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeInt__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeInt__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeInt__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _TypeInt__ReprKeyAssembler _TypeInt__ReprAssembler
func (_TypeInt__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.BeginMap(0)
}
func (_TypeInt__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_TypeInt__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignNull()
}
func (_TypeInt__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignBool(false)
}
func (_TypeInt__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignInt(0)
}
func (_TypeInt__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeInt__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeInt.Repr", Key:&_String{k}}
	}
	return nil
}
func (_TypeInt__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeInt__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeInt.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeInt__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeInt__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
