package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _StructRepresentation struct {
	tag uint
	x1 _StructRepresentation_Map
	x2 _StructRepresentation_Tuple
	x3 _StructRepresentation_StringPairs
	x4 _StructRepresentation_StringJoin
	x5 _StructRepresentation_ListPairs
}
type StructRepresentation = *_StructRepresentation

type _StructRepresentation__iface interface {
	_StructRepresentation__member()
}
func (_StructRepresentation_Map) _StructRepresentation__member() {}
func (_StructRepresentation_Tuple) _StructRepresentation__member() {}
func (_StructRepresentation_StringPairs) _StructRepresentation__member() {}
func (_StructRepresentation_StringJoin) _StructRepresentation__member() {}
func (_StructRepresentation_ListPairs) _StructRepresentation__member() {}
func (n _StructRepresentation) AsInterface() _StructRepresentation__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	case 3:
		return &n.x3
	case 4:
		return &n.x4
	case 5:
		return &n.x5
	default:
		panic("invalid union state; how did you create this object?")
	}
}
type _StructRepresentation__Maybe struct {
	m schema.Maybe
	v StructRepresentation
}
type MaybeStructRepresentation = *_StructRepresentation__Maybe

func (m MaybeStructRepresentation) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeStructRepresentation) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeStructRepresentation) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeStructRepresentation) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeStructRepresentation) Must() StructRepresentation {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	memberName__StructRepresentation_StructRepresentation_Map = _String{"StructRepresentation_Map"}
	memberName__StructRepresentation_StructRepresentation_Tuple = _String{"StructRepresentation_Tuple"}
	memberName__StructRepresentation_StructRepresentation_StringPairs = _String{"StructRepresentation_StringPairs"}
	memberName__StructRepresentation_StructRepresentation_StringJoin = _String{"StructRepresentation_StringJoin"}
	memberName__StructRepresentation_StructRepresentation_ListPairs = _String{"StructRepresentation_ListPairs"}
)
var _ ipld.Node = (StructRepresentation)(&_StructRepresentation{})
var _ schema.TypedNode = (StructRepresentation)(&_StructRepresentation{})
func (StructRepresentation) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n StructRepresentation) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "StructRepresentation_Map":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "StructRepresentation_Tuple":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "StructRepresentation_StringPairs":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "StructRepresentation_StringJoin":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "StructRepresentation_ListPairs":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n StructRepresentation) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (StructRepresentation) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructRepresentation"}.LookupByIndex(0)
}
func (n StructRepresentation) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n StructRepresentation) MapIterator() ipld.MapIterator {
	return &_StructRepresentation__MapItr{n, false}
}

type _StructRepresentation__MapItr struct {
	n StructRepresentation
	done bool
}

func (itr *_StructRepresentation__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__StructRepresentation_StructRepresentation_Map, &itr.n.x1, nil
	case 2:
		return &memberName__StructRepresentation_StructRepresentation_Tuple, &itr.n.x2, nil
	case 3:
		return &memberName__StructRepresentation_StructRepresentation_StringPairs, &itr.n.x3, nil
	case 4:
		return &memberName__StructRepresentation_StructRepresentation_StringJoin, &itr.n.x4, nil
	case 5:
		return &memberName__StructRepresentation_StructRepresentation_ListPairs, &itr.n.x5, nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_StructRepresentation__MapItr) Done() bool {
	return itr.done
}

func (StructRepresentation) ListIterator() ipld.ListIterator {
	return nil
}
func (StructRepresentation) Length() int {
	return 1
}
func (StructRepresentation) IsAbsent() bool {
	return false
}
func (StructRepresentation) IsNull() bool {
	return false
}
func (StructRepresentation) AsBool() (bool, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsBool()
}
func (StructRepresentation) AsInt() (int, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsInt()
}
func (StructRepresentation) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsFloat()
}
func (StructRepresentation) AsString() (string, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsString()
}
func (StructRepresentation) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsBytes()
}
func (StructRepresentation) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructRepresentation"}.AsLink()
}
func (StructRepresentation) Prototype() ipld.NodePrototype {
	return _StructRepresentation__Prototype{}
}
type _StructRepresentation__Prototype struct{}

func (_StructRepresentation__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructRepresentation__Builder
	nb.Reset()
	return &nb
}
type _StructRepresentation__Builder struct {
	_StructRepresentation__Assembler
}
func (nb *_StructRepresentation__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructRepresentation__Builder) Reset() {
	var w _StructRepresentation
	var m schema.Maybe
	*nb = _StructRepresentation__Builder{_StructRepresentation__Assembler{w: &w, m: &m}}
}
type _StructRepresentation__Assembler struct {
	w *_StructRepresentation
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 _StructRepresentation_Map__Assembler
	
	ca2 _StructRepresentation_Tuple__Assembler
	
	ca3 _StructRepresentation_StringPairs__Assembler
	
	ca4 _StructRepresentation_StringJoin__Assembler
	
	ca5 _StructRepresentation_ListPairs__Assembler
	ca uint
}
func (na *_StructRepresentation__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_StructRepresentation__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructRepresentation{}
	}
	return na, nil
}
func (_StructRepresentation__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructRepresentation"}.BeginList(0)
}
func (na *_StructRepresentation__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructRepresentation"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructRepresentation__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignBool(false)
}
func (_StructRepresentation__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignInt(0)
}
func (_StructRepresentation__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignFloat(0)
}
func (_StructRepresentation__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignString("")
}
func (_StructRepresentation__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignBytes(nil)
}
func (_StructRepresentation__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructRepresentation"}.AssignLink(nil)
}
func (na *_StructRepresentation__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructRepresentation); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructRepresentation", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructRepresentation__Assembler) Prototype() ipld.NodePrototype {
	return _StructRepresentation__Prototype{}
}
func (ma *_StructRepresentation__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_StructRepresentation__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "StructRepresentation_Map":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "StructRepresentation_Tuple":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "StructRepresentation_StringPairs":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "StructRepresentation_StringJoin":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "StructRepresentation_ListPairs":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation", Key:&_String{k}}
	}
}
func (ma *_StructRepresentation__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructRepresentation__KeyAssembler)(ma)
}
func (ma *_StructRepresentation__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructRepresentation__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructRepresentation__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "StructRepresentation_Map":
		return _StructRepresentation_Map__Prototype{}
	case "StructRepresentation_Tuple":
		return _StructRepresentation_Tuple__Prototype{}
	case "StructRepresentation_StringPairs":
		return _StructRepresentation_StringPairs__Prototype{}
	case "StructRepresentation_StringJoin":
		return _StructRepresentation_StringJoin__Prototype{}
	case "StructRepresentation_ListPairs":
		return _StructRepresentation_ListPairs__Prototype{}
	default:
		return nil
	}
}
type _StructRepresentation__KeyAssembler _StructRepresentation__Assembler
func (_StructRepresentation__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.BeginMap(0)
}
func (_StructRepresentation__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.BeginList(0)
}
func (na *_StructRepresentation__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignNull()
}
func (_StructRepresentation__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignBool(false)
}
func (_StructRepresentation__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignInt(0)
}
func (_StructRepresentation__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructRepresentation__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "StructRepresentation_Map":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "StructRepresentation_Tuple":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "StructRepresentation_StringPairs":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "StructRepresentation_StringJoin":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "StructRepresentation_ListPairs":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_StructRepresentation__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignBytes(nil)
}
func (_StructRepresentation__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructRepresentation.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructRepresentation__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructRepresentation__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (StructRepresentation) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n StructRepresentation) Representation() ipld.Node {
	return (*_StructRepresentation__Repr)(n)
}
type _StructRepresentation__Repr _StructRepresentation
var (
	memberName__StructRepresentation_StructRepresentation_Map_serial = _String{"map"}
	memberName__StructRepresentation_StructRepresentation_Tuple_serial = _String{"tuple"}
	memberName__StructRepresentation_StructRepresentation_StringPairs_serial = _String{"stringpairs"}
	memberName__StructRepresentation_StructRepresentation_StringJoin_serial = _String{"stringjoin"}
	memberName__StructRepresentation_StructRepresentation_ListPairs_serial = _String{"listpairs"}
)
var _ ipld.Node = &_StructRepresentation__Repr{}
func (_StructRepresentation__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_StructRepresentation__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "map":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "tuple":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "stringpairs":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "stringjoin":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "listpairs":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_StructRepresentation__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_StructRepresentation__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.LookupByIndex(0)
}
func (n _StructRepresentation__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_StructRepresentation__Repr) MapIterator() ipld.MapIterator {
	return &_StructRepresentation__ReprMapItr{n, false}
}

type _StructRepresentation__ReprMapItr struct {
	n *_StructRepresentation__Repr
	done bool
}

func (itr *_StructRepresentation__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__StructRepresentation_StructRepresentation_Map_serial, itr.n.x1.Representation(), nil
	case 2:
		return &memberName__StructRepresentation_StructRepresentation_Tuple_serial, itr.n.x2.Representation(), nil
	case 3:
		return &memberName__StructRepresentation_StructRepresentation_StringPairs_serial, itr.n.x3.Representation(), nil
	case 4:
		return &memberName__StructRepresentation_StructRepresentation_StringJoin_serial, itr.n.x4.Representation(), nil
	case 5:
		return &memberName__StructRepresentation_StructRepresentation_ListPairs_serial, itr.n.x5.Representation(), nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_StructRepresentation__ReprMapItr) Done() bool {
	return itr.done
}

func (_StructRepresentation__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_StructRepresentation__Repr) Length() int {
	return 1
}
func (_StructRepresentation__Repr) IsAbsent() bool {
	return false
}
func (_StructRepresentation__Repr) IsNull() bool {
	return false
}
func (_StructRepresentation__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsBool()
}
func (_StructRepresentation__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsInt()
}
func (_StructRepresentation__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsFloat()
}
func (_StructRepresentation__Repr) AsString() (string, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsString()
}
func (_StructRepresentation__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsBytes()
}
func (_StructRepresentation__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructRepresentation.Repr"}.AsLink()
}
func (_StructRepresentation__Repr) Prototype() ipld.NodePrototype {
	return _StructRepresentation__ReprPrototype{}
}
type _StructRepresentation__ReprPrototype struct{}

func (_StructRepresentation__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructRepresentation__ReprBuilder
	nb.Reset()
	return &nb
}
type _StructRepresentation__ReprBuilder struct {
	_StructRepresentation__ReprAssembler
}
func (nb *_StructRepresentation__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructRepresentation__ReprBuilder) Reset() {
	var w _StructRepresentation
	var m schema.Maybe
	*nb = _StructRepresentation__ReprBuilder{_StructRepresentation__ReprAssembler{w: &w, m: &m}}
}
type _StructRepresentation__ReprAssembler struct {
	w *_StructRepresentation
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 _StructRepresentation_Map__ReprAssembler
	
	ca2 _StructRepresentation_Tuple__ReprAssembler
	
	ca3 _StructRepresentation_StringPairs__ReprAssembler
	
	ca4 _StructRepresentation_StringJoin__ReprAssembler
	
	ca5 _StructRepresentation_ListPairs__ReprAssembler
	ca uint
}
func (na *_StructRepresentation__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_StructRepresentation__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructRepresentation{}
	}
	return na, nil
}
func (_StructRepresentation__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.BeginList(0)
}
func (na *_StructRepresentation__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructRepresentation.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructRepresentation__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignBool(false)
}
func (_StructRepresentation__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignInt(0)
}
func (_StructRepresentation__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignFloat(0)
}
func (_StructRepresentation__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignString("")
}
func (_StructRepresentation__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignBytes(nil)
}
func (_StructRepresentation__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructRepresentation.Repr"}.AssignLink(nil)
}
func (na *_StructRepresentation__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructRepresentation); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructRepresentation.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructRepresentation__ReprAssembler) Prototype() ipld.NodePrototype {
	return _StructRepresentation__ReprPrototype{}
}
func (ma *_StructRepresentation__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_StructRepresentation__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "map":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "tuple":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "stringpairs":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "stringjoin":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "listpairs":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation.Repr", Key:&_String{k}}
	}
}
func (ma *_StructRepresentation__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructRepresentation__ReprKeyAssembler)(ma)
}
func (ma *_StructRepresentation__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructRepresentation__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructRepresentation__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "StructRepresentation_Map":
		return _StructRepresentation_Map__ReprPrototype{}
	case "StructRepresentation_Tuple":
		return _StructRepresentation_Tuple__ReprPrototype{}
	case "StructRepresentation_StringPairs":
		return _StructRepresentation_StringPairs__ReprPrototype{}
	case "StructRepresentation_StringJoin":
		return _StructRepresentation_StringJoin__ReprPrototype{}
	case "StructRepresentation_ListPairs":
		return _StructRepresentation_ListPairs__ReprPrototype{}
	default:
		return nil
	}
}
type _StructRepresentation__ReprKeyAssembler _StructRepresentation__ReprAssembler
func (_StructRepresentation__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.BeginMap(0)
}
func (_StructRepresentation__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_StructRepresentation__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignNull()
}
func (_StructRepresentation__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignBool(false)
}
func (_StructRepresentation__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignInt(0)
}
func (_StructRepresentation__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructRepresentation__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.StructRepresentation.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "map":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "tuple":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "stringpairs":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "stringjoin":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "listpairs":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation.Repr", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_StructRepresentation__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_StructRepresentation__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructRepresentation.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructRepresentation__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructRepresentation__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
