package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _TypeBytes struct {
}
type TypeBytes = *_TypeBytes

type _TypeBytes__Maybe struct {
	m schema.Maybe
	v TypeBytes
}
type MaybeTypeBytes = *_TypeBytes__Maybe

func (m MaybeTypeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTypeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTypeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTypeBytes) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTypeBytes) Must() TypeBytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
)
var _ ipld.Node = (TypeBytes)(&_TypeBytes{})
var _ schema.TypedNode = (TypeBytes)(&_TypeBytes{})
func (TypeBytes) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n TypeBytes) LookupByString(key string) (ipld.Node, error) {
	switch key {
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n TypeBytes) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (TypeBytes) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeBytes"}.LookupByIndex(0)
}
func (n TypeBytes) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n TypeBytes) MapIterator() ipld.MapIterator {
	return &_TypeBytes__MapItr{n, 0}
}

type _TypeBytes__MapItr struct {
	n TypeBytes
	idx  int
}

func (itr *_TypeBytes__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 0 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeBytes__MapItr) Done() bool {
	return itr.idx >= 0
}

func (TypeBytes) ListIterator() ipld.ListIterator {
	return nil
}
func (TypeBytes) Length() int {
	return 0
}
func (TypeBytes) IsAbsent() bool {
	return false
}
func (TypeBytes) IsNull() bool {
	return false
}
func (TypeBytes) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeBytes"}.AsBool()
}
func (TypeBytes) AsInt() (int, error) {
	return mixins.Map{"schema.TypeBytes"}.AsInt()
}
func (TypeBytes) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeBytes"}.AsFloat()
}
func (TypeBytes) AsString() (string, error) {
	return mixins.Map{"schema.TypeBytes"}.AsString()
}
func (TypeBytes) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeBytes"}.AsBytes()
}
func (TypeBytes) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeBytes"}.AsLink()
}
func (TypeBytes) Prototype() ipld.NodePrototype {
	return _TypeBytes__Prototype{}
}
type _TypeBytes__Prototype struct{}

func (_TypeBytes__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeBytes__Builder
	nb.Reset()
	return &nb
}
type _TypeBytes__Builder struct {
	_TypeBytes__Assembler
}
func (nb *_TypeBytes__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeBytes__Builder) Reset() {
	var w _TypeBytes
	var m schema.Maybe
	*nb = _TypeBytes__Builder{_TypeBytes__Assembler{w: &w, m: &m}}
}
type _TypeBytes__Assembler struct {
	w *_TypeBytes
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	}

func (na *_TypeBytes__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
}

var (
	fieldBits__TypeBytes_sufficient = 0
)
func (na *_TypeBytes__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeBytes{}
	}
	return na, nil
}
func (_TypeBytes__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeBytes"}.BeginList(0)
}
func (na *_TypeBytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeBytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeBytes__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignBool(false)
}
func (_TypeBytes__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignInt(0)
}
func (_TypeBytes__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignFloat(0)
}
func (_TypeBytes__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignString("")
}
func (_TypeBytes__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignBytes(nil)
}
func (_TypeBytes__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeBytes"}.AssignLink(nil)
}
func (na *_TypeBytes__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeBytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeBytes", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeBytes__Assembler) Prototype() ipld.NodePrototype {
	return _TypeBytes__Prototype{}
}
func (ma *_TypeBytes__Assembler) valueFinishTidy() bool {
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeBytes__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeBytes", Key:&_String{k}}
	}
}
func (ma *_TypeBytes__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeBytes__KeyAssembler)(ma)
}
func (ma *_TypeBytes__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeBytes__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeBytes__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeBytes__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _TypeBytes__KeyAssembler _TypeBytes__Assembler
func (_TypeBytes__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.BeginMap(0)
}
func (_TypeBytes__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.BeginList(0)
}
func (na *_TypeBytes__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignNull()
}
func (_TypeBytes__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignBool(false)
}
func (_TypeBytes__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignInt(0)
}
func (_TypeBytes__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeBytes__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeBytes", Key:&_String{k}}
	}
	return nil
}
func (_TypeBytes__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeBytes__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeBytes.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeBytes__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeBytes__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (TypeBytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n TypeBytes) Representation() ipld.Node {
	return (*_TypeBytes__Repr)(n)
}
type _TypeBytes__Repr _TypeBytes
var (
)
var _ ipld.Node = &_TypeBytes__Repr{}
func (_TypeBytes__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_TypeBytes__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_TypeBytes__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_TypeBytes__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.LookupByIndex(0)
}
func (n _TypeBytes__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_TypeBytes__Repr) MapIterator() ipld.MapIterator {
	return &_TypeBytes__ReprMapItr{n, 0}
}

type _TypeBytes__ReprMapItr struct {
	n   *_TypeBytes__Repr
	idx int
	
}

func (itr *_TypeBytes__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
if itr.idx >= 0 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TypeBytes__ReprMapItr) Done() bool {
	return itr.idx >= 0
}
func (_TypeBytes__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_TypeBytes__Repr) Length() int {
	l := 0
	return l
}
func (_TypeBytes__Repr) IsAbsent() bool {
	return false
}
func (_TypeBytes__Repr) IsNull() bool {
	return false
}
func (_TypeBytes__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsBool()
}
func (_TypeBytes__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsInt()
}
func (_TypeBytes__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsFloat()
}
func (_TypeBytes__Repr) AsString() (string, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsString()
}
func (_TypeBytes__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsBytes()
}
func (_TypeBytes__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeBytes.Repr"}.AsLink()
}
func (_TypeBytes__Repr) Prototype() ipld.NodePrototype {
	return _TypeBytes__ReprPrototype{}
}
type _TypeBytes__ReprPrototype struct{}

func (_TypeBytes__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeBytes__ReprBuilder
	nb.Reset()
	return &nb
}
type _TypeBytes__ReprBuilder struct {
	_TypeBytes__ReprAssembler
}
func (nb *_TypeBytes__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeBytes__ReprBuilder) Reset() {
	var w _TypeBytes
	var m schema.Maybe
	*nb = _TypeBytes__ReprBuilder{_TypeBytes__ReprAssembler{w: &w, m: &m}}
}
type _TypeBytes__ReprAssembler struct {
	w *_TypeBytes
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	}

func (na *_TypeBytes__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
}
func (na *_TypeBytes__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeBytes{}
	}
	return na, nil
}
func (_TypeBytes__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.BeginList(0)
}
func (na *_TypeBytes__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeBytes.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeBytes__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignBool(false)
}
func (_TypeBytes__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignInt(0)
}
func (_TypeBytes__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignFloat(0)
}
func (_TypeBytes__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignString("")
}
func (_TypeBytes__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignBytes(nil)
}
func (_TypeBytes__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeBytes.Repr"}.AssignLink(nil)
}
func (na *_TypeBytes__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeBytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeBytes.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeBytes__ReprAssembler) Prototype() ipld.NodePrototype {
	return _TypeBytes__ReprPrototype{}
}
func (ma *_TypeBytes__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeBytes__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeBytes.Repr", Key:&_String{k}}
	}
}
func (ma *_TypeBytes__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeBytes__ReprKeyAssembler)(ma)
}
func (ma *_TypeBytes__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	default:
		panic("unreachable")
	}
}
func (ma *_TypeBytes__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeBytes__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeBytes__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _TypeBytes__ReprKeyAssembler _TypeBytes__ReprAssembler
func (_TypeBytes__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.BeginMap(0)
}
func (_TypeBytes__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_TypeBytes__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignNull()
}
func (_TypeBytes__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignBool(false)
}
func (_TypeBytes__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignInt(0)
}
func (_TypeBytes__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeBytes__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeBytes.Repr", Key:&_String{k}}
	}
	return nil
}
func (_TypeBytes__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeBytes__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeBytes.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeBytes__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeBytes__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
