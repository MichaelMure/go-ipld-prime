package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _FieldName struct{ x string }
type FieldName = *_FieldName
func (n FieldName) String() string {
	return n.x
}
func (_FieldName__Prototype) fromString(w *_FieldName, v string) error {
	*w = _FieldName{v}
	return nil
}
func (_FieldName__Prototype) FromString(v string) (FieldName, error) {
	n := _FieldName{v}
	return &n, nil
}
type _FieldName__Maybe struct {
	m schema.Maybe
	v FieldName
}
type MaybeFieldName = *_FieldName__Maybe

func (m MaybeFieldName) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFieldName) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFieldName) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFieldName) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeFieldName) Must() FieldName {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (FieldName)(&_FieldName{})
var _ schema.TypedNode = (FieldName)(&_FieldName{})
func (FieldName) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_String
}
func (FieldName) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"schema.FieldName"}.LookupByString("")
}
func (FieldName) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"schema.FieldName"}.LookupByNode(nil)
}
func (FieldName) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.String{"schema.FieldName"}.LookupByIndex(0)
}
func (FieldName) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"schema.FieldName"}.LookupBySegment(seg)
}
func (FieldName) MapIterator() ipld.MapIterator {
	return nil
}
func (FieldName) ListIterator() ipld.ListIterator {
	return nil
}
func (FieldName) Length() int {
	return -1
}
func (FieldName) IsAbsent() bool {
	return false
}
func (FieldName) IsNull() bool {
	return false
}
func (FieldName) AsBool() (bool, error) {
	return mixins.String{"schema.FieldName"}.AsBool()
}
func (FieldName) AsInt() (int, error) {
	return mixins.String{"schema.FieldName"}.AsInt()
}
func (FieldName) AsFloat() (float64, error) {
	return mixins.String{"schema.FieldName"}.AsFloat()
}
func (n FieldName) AsString() (string, error) {
	return n.x, nil
}
func (FieldName) AsBytes() ([]byte, error) {
	return mixins.String{"schema.FieldName"}.AsBytes()
}
func (FieldName) AsLink() (ipld.Link, error) {
	return mixins.String{"schema.FieldName"}.AsLink()
}
func (FieldName) Prototype() ipld.NodePrototype {
	return _FieldName__Prototype{}
}
type _FieldName__Prototype struct{}

func (_FieldName__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _FieldName__Builder
	nb.Reset()
	return &nb
}
type _FieldName__Builder struct {
	_FieldName__Assembler
}
func (nb *_FieldName__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_FieldName__Builder) Reset() {
	var w _FieldName
	var m schema.Maybe
	*nb = _FieldName__Builder{_FieldName__Assembler{w: &w, m: &m}}
}
type _FieldName__Assembler struct {
	w *_FieldName
	m *schema.Maybe
}

func (na *_FieldName__Assembler) reset() {}
func (_FieldName__Assembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.FieldName"}.BeginMap(0)
}
func (_FieldName__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.FieldName"}.BeginList(0)
}
func (na *_FieldName__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"schema.FieldName"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_FieldName__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.FieldName"}.AssignBool(false)
}
func (_FieldName__Assembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.FieldName"}.AssignInt(0)
}
func (_FieldName__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.FieldName"}.AssignFloat(0)
}
func (na *_FieldName__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_FieldName{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_FieldName__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.FieldName"}.AssignBytes(nil)
}
func (_FieldName__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.FieldName"}.AssignLink(nil)
}
func (na *_FieldName__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_FieldName); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_FieldName__Assembler) Prototype() ipld.NodePrototype {
	return _FieldName__Prototype{}
}
func (FieldName) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n FieldName) Representation() ipld.Node {
	return (*_FieldName__Repr)(n)
}
type _FieldName__Repr = _FieldName
var _ ipld.Node = &_FieldName__Repr{}
type _FieldName__ReprPrototype = _FieldName__Prototype
type _FieldName__ReprAssembler = _FieldName__Assembler
