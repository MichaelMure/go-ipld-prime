package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _TypeDefn struct {
	tag uint
	x1 _TypeBool
	x2 _TypeString
	x3 _TypeBytes
	x4 _TypeInt
	x5 _TypeFloat
	x6 _TypeMap
	x7 _TypeList
	x8 _TypeLink
	x9 _TypeUnion
	x10 _TypeStruct
	x11 _TypeEnum
	x12 _TypeCopy
}
type TypeDefn = *_TypeDefn

type _TypeDefn__iface interface {
	_TypeDefn__member()
}
func (_TypeBool) _TypeDefn__member() {}
func (_TypeString) _TypeDefn__member() {}
func (_TypeBytes) _TypeDefn__member() {}
func (_TypeInt) _TypeDefn__member() {}
func (_TypeFloat) _TypeDefn__member() {}
func (_TypeMap) _TypeDefn__member() {}
func (_TypeList) _TypeDefn__member() {}
func (_TypeLink) _TypeDefn__member() {}
func (_TypeUnion) _TypeDefn__member() {}
func (_TypeStruct) _TypeDefn__member() {}
func (_TypeEnum) _TypeDefn__member() {}
func (_TypeCopy) _TypeDefn__member() {}
func (n _TypeDefn) AsInterface() _TypeDefn__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	case 3:
		return &n.x3
	case 4:
		return &n.x4
	case 5:
		return &n.x5
	case 6:
		return &n.x6
	case 7:
		return &n.x7
	case 8:
		return &n.x8
	case 9:
		return &n.x9
	case 10:
		return &n.x10
	case 11:
		return &n.x11
	case 12:
		return &n.x12
	default:
		panic("invalid union state; how did you create this object?")
	}
}
type _TypeDefn__Maybe struct {
	m schema.Maybe
	v TypeDefn
}
type MaybeTypeDefn = *_TypeDefn__Maybe

func (m MaybeTypeDefn) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTypeDefn) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTypeDefn) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTypeDefn) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTypeDefn) Must() TypeDefn {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	memberName__TypeDefn_TypeBool = _String{"TypeBool"}
	memberName__TypeDefn_TypeString = _String{"TypeString"}
	memberName__TypeDefn_TypeBytes = _String{"TypeBytes"}
	memberName__TypeDefn_TypeInt = _String{"TypeInt"}
	memberName__TypeDefn_TypeFloat = _String{"TypeFloat"}
	memberName__TypeDefn_TypeMap = _String{"TypeMap"}
	memberName__TypeDefn_TypeList = _String{"TypeList"}
	memberName__TypeDefn_TypeLink = _String{"TypeLink"}
	memberName__TypeDefn_TypeUnion = _String{"TypeUnion"}
	memberName__TypeDefn_TypeStruct = _String{"TypeStruct"}
	memberName__TypeDefn_TypeEnum = _String{"TypeEnum"}
	memberName__TypeDefn_TypeCopy = _String{"TypeCopy"}
)
var _ ipld.Node = (TypeDefn)(&_TypeDefn{})
var _ schema.TypedNode = (TypeDefn)(&_TypeDefn{})
func (TypeDefn) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n TypeDefn) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "TypeBool":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "TypeString":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "TypeBytes":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "TypeInt":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "TypeFloat":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	case "TypeMap":
		if n.tag != 6 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x6, nil
	case "TypeList":
		if n.tag != 7 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x7, nil
	case "TypeLink":
		if n.tag != 8 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x8, nil
	case "TypeUnion":
		if n.tag != 9 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x9, nil
	case "TypeStruct":
		if n.tag != 10 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x10, nil
	case "TypeEnum":
		if n.tag != 11 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x11, nil
	case "TypeCopy":
		if n.tag != 12 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x12, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n TypeDefn) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (TypeDefn) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeDefn"}.LookupByIndex(0)
}
func (n TypeDefn) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n TypeDefn) MapIterator() ipld.MapIterator {
	return &_TypeDefn__MapItr{n, false}
}

type _TypeDefn__MapItr struct {
	n TypeDefn
	done bool
}

func (itr *_TypeDefn__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__TypeDefn_TypeBool, &itr.n.x1, nil
	case 2:
		return &memberName__TypeDefn_TypeString, &itr.n.x2, nil
	case 3:
		return &memberName__TypeDefn_TypeBytes, &itr.n.x3, nil
	case 4:
		return &memberName__TypeDefn_TypeInt, &itr.n.x4, nil
	case 5:
		return &memberName__TypeDefn_TypeFloat, &itr.n.x5, nil
	case 6:
		return &memberName__TypeDefn_TypeMap, &itr.n.x6, nil
	case 7:
		return &memberName__TypeDefn_TypeList, &itr.n.x7, nil
	case 8:
		return &memberName__TypeDefn_TypeLink, &itr.n.x8, nil
	case 9:
		return &memberName__TypeDefn_TypeUnion, &itr.n.x9, nil
	case 10:
		return &memberName__TypeDefn_TypeStruct, &itr.n.x10, nil
	case 11:
		return &memberName__TypeDefn_TypeEnum, &itr.n.x11, nil
	case 12:
		return &memberName__TypeDefn_TypeCopy, &itr.n.x12, nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_TypeDefn__MapItr) Done() bool {
	return itr.done
}

func (TypeDefn) ListIterator() ipld.ListIterator {
	return nil
}
func (TypeDefn) Length() int {
	return 1
}
func (TypeDefn) IsAbsent() bool {
	return false
}
func (TypeDefn) IsNull() bool {
	return false
}
func (TypeDefn) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeDefn"}.AsBool()
}
func (TypeDefn) AsInt() (int, error) {
	return mixins.Map{"schema.TypeDefn"}.AsInt()
}
func (TypeDefn) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeDefn"}.AsFloat()
}
func (TypeDefn) AsString() (string, error) {
	return mixins.Map{"schema.TypeDefn"}.AsString()
}
func (TypeDefn) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeDefn"}.AsBytes()
}
func (TypeDefn) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeDefn"}.AsLink()
}
func (TypeDefn) Prototype() ipld.NodePrototype {
	return _TypeDefn__Prototype{}
}
type _TypeDefn__Prototype struct{}

func (_TypeDefn__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeDefn__Builder
	nb.Reset()
	return &nb
}
type _TypeDefn__Builder struct {
	_TypeDefn__Assembler
}
func (nb *_TypeDefn__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeDefn__Builder) Reset() {
	var w _TypeDefn
	var m schema.Maybe
	*nb = _TypeDefn__Builder{_TypeDefn__Assembler{w: &w, m: &m}}
}
type _TypeDefn__Assembler struct {
	w *_TypeDefn
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 _TypeBool__Assembler
	
	ca2 _TypeString__Assembler
	
	ca3 _TypeBytes__Assembler
	
	ca4 _TypeInt__Assembler
	
	ca5 _TypeFloat__Assembler
	
	ca6 _TypeMap__Assembler
	
	ca7 _TypeList__Assembler
	
	ca8 _TypeLink__Assembler
	
	ca9 _TypeUnion__Assembler
	
	ca10 _TypeStruct__Assembler
	
	ca11 _TypeEnum__Assembler
	
	ca12 _TypeCopy__Assembler
	ca uint
}
func (na *_TypeDefn__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	
	case 8:
		na.ca8.reset()
	
	case 9:
		na.ca9.reset()
	
	case 10:
		na.ca10.reset()
	
	case 11:
		na.ca11.reset()
	
	case 12:
		na.ca12.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_TypeDefn__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeDefn{}
	}
	return na, nil
}
func (_TypeDefn__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeDefn"}.BeginList(0)
}
func (na *_TypeDefn__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeDefn"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeDefn__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignBool(false)
}
func (_TypeDefn__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignInt(0)
}
func (_TypeDefn__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignFloat(0)
}
func (_TypeDefn__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignString("")
}
func (_TypeDefn__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignBytes(nil)
}
func (_TypeDefn__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeDefn"}.AssignLink(nil)
}
func (na *_TypeDefn__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeDefn); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeDefn", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeDefn__Assembler) Prototype() ipld.NodePrototype {
	return _TypeDefn__Prototype{}
}
func (ma *_TypeDefn__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_TypeDefn__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "TypeBool":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "TypeString":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "TypeBytes":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "TypeInt":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "TypeFloat":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	case "TypeMap":
		ma.state = maState_midValue
		ma.ca = 6
		ma.w.tag = 6
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6, nil
	case "TypeList":
		ma.state = maState_midValue
		ma.ca = 7
		ma.w.tag = 7
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7, nil
	case "TypeLink":
		ma.state = maState_midValue
		ma.ca = 8
		ma.w.tag = 8
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8, nil
	case "TypeUnion":
		ma.state = maState_midValue
		ma.ca = 9
		ma.w.tag = 9
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9, nil
	case "TypeStruct":
		ma.state = maState_midValue
		ma.ca = 10
		ma.w.tag = 10
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10, nil
	case "TypeEnum":
		ma.state = maState_midValue
		ma.ca = 11
		ma.w.tag = 11
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11, nil
	case "TypeCopy":
		ma.state = maState_midValue
		ma.ca = 12
		ma.w.tag = 12
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeDefn", Key:&_String{k}}
	}
}
func (ma *_TypeDefn__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeDefn__KeyAssembler)(ma)
}
func (ma *_TypeDefn__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	case 5:
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6
	case 6:
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7
	case 7:
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8
	case 8:
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9
	case 9:
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10
	case 10:
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11
	case 11:
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12
	default:
		panic("unreachable")
	}
}
func (ma *_TypeDefn__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeDefn__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeDefn__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "TypeBool":
		return _TypeBool__Prototype{}
	case "TypeString":
		return _TypeString__Prototype{}
	case "TypeBytes":
		return _TypeBytes__Prototype{}
	case "TypeInt":
		return _TypeInt__Prototype{}
	case "TypeFloat":
		return _TypeFloat__Prototype{}
	case "TypeMap":
		return _TypeMap__Prototype{}
	case "TypeList":
		return _TypeList__Prototype{}
	case "TypeLink":
		return _TypeLink__Prototype{}
	case "TypeUnion":
		return _TypeUnion__Prototype{}
	case "TypeStruct":
		return _TypeStruct__Prototype{}
	case "TypeEnum":
		return _TypeEnum__Prototype{}
	case "TypeCopy":
		return _TypeCopy__Prototype{}
	default:
		return nil
	}
}
type _TypeDefn__KeyAssembler _TypeDefn__Assembler
func (_TypeDefn__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.BeginMap(0)
}
func (_TypeDefn__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.BeginList(0)
}
func (na *_TypeDefn__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignNull()
}
func (_TypeDefn__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignBool(false)
}
func (_TypeDefn__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignInt(0)
}
func (_TypeDefn__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeDefn__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "TypeBool":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "TypeString":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "TypeBytes":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "TypeInt":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "TypeFloat":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	case "TypeMap":
		ka.ca = 6
		ka.w.tag = 6
		ka.state = maState_expectValue
		return nil
	case "TypeList":
		ka.ca = 7
		ka.w.tag = 7
		ka.state = maState_expectValue
		return nil
	case "TypeLink":
		ka.ca = 8
		ka.w.tag = 8
		ka.state = maState_expectValue
		return nil
	case "TypeUnion":
		ka.ca = 9
		ka.w.tag = 9
		ka.state = maState_expectValue
		return nil
	case "TypeStruct":
		ka.ca = 10
		ka.w.tag = 10
		ka.state = maState_expectValue
		return nil
	case "TypeEnum":
		ka.ca = 11
		ka.w.tag = 11
		ka.state = maState_expectValue
		return nil
	case "TypeCopy":
		ka.ca = 12
		ka.w.tag = 12
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeDefn", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_TypeDefn__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeDefn__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeDefn.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeDefn__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeDefn__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (TypeDefn) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n TypeDefn) Representation() ipld.Node {
	return (*_TypeDefn__Repr)(n)
}
type _TypeDefn__Repr _TypeDefn
var (
	memberName__TypeDefn_TypeBool_serial = _String{"bool"}
	memberName__TypeDefn_TypeString_serial = _String{"string"}
	memberName__TypeDefn_TypeBytes_serial = _String{"bytes"}
	memberName__TypeDefn_TypeInt_serial = _String{"int"}
	memberName__TypeDefn_TypeFloat_serial = _String{"float"}
	memberName__TypeDefn_TypeMap_serial = _String{"map"}
	memberName__TypeDefn_TypeList_serial = _String{"list"}
	memberName__TypeDefn_TypeLink_serial = _String{"link"}
	memberName__TypeDefn_TypeUnion_serial = _String{"union"}
	memberName__TypeDefn_TypeStruct_serial = _String{"struct"}
	memberName__TypeDefn_TypeEnum_serial = _String{"enum"}
	memberName__TypeDefn_TypeCopy_serial = _String{"copy"}
)
var _ ipld.Node = &_TypeDefn__Repr{}
func (_TypeDefn__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_TypeDefn__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "bool":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "string":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "bytes":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "int":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "float":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	case "map":
		if n.tag != 6 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x6, nil
	case "list":
		if n.tag != 7 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x7, nil
	case "link":
		if n.tag != 8 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x8, nil
	case "union":
		if n.tag != 9 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x9, nil
	case "struct":
		if n.tag != 10 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x10, nil
	case "enum":
		if n.tag != 11 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x11, nil
	case "copy":
		if n.tag != 12 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x12, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_TypeDefn__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_TypeDefn__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.LookupByIndex(0)
}
func (n _TypeDefn__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_TypeDefn__Repr) MapIterator() ipld.MapIterator {
	return &_TypeDefn__ReprMapItr{n, false}
}

type _TypeDefn__ReprMapItr struct {
	n *_TypeDefn__Repr
	done bool
}

func (itr *_TypeDefn__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__TypeDefn_TypeBool_serial, itr.n.x1.Representation(), nil
	case 2:
		return &memberName__TypeDefn_TypeString_serial, itr.n.x2.Representation(), nil
	case 3:
		return &memberName__TypeDefn_TypeBytes_serial, itr.n.x3.Representation(), nil
	case 4:
		return &memberName__TypeDefn_TypeInt_serial, itr.n.x4.Representation(), nil
	case 5:
		return &memberName__TypeDefn_TypeFloat_serial, itr.n.x5.Representation(), nil
	case 6:
		return &memberName__TypeDefn_TypeMap_serial, itr.n.x6.Representation(), nil
	case 7:
		return &memberName__TypeDefn_TypeList_serial, itr.n.x7.Representation(), nil
	case 8:
		return &memberName__TypeDefn_TypeLink_serial, itr.n.x8.Representation(), nil
	case 9:
		return &memberName__TypeDefn_TypeUnion_serial, itr.n.x9.Representation(), nil
	case 10:
		return &memberName__TypeDefn_TypeStruct_serial, itr.n.x10.Representation(), nil
	case 11:
		return &memberName__TypeDefn_TypeEnum_serial, itr.n.x11.Representation(), nil
	case 12:
		return &memberName__TypeDefn_TypeCopy_serial, itr.n.x12.Representation(), nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_TypeDefn__ReprMapItr) Done() bool {
	return itr.done
}

func (_TypeDefn__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_TypeDefn__Repr) Length() int {
	return 1
}
func (_TypeDefn__Repr) IsAbsent() bool {
	return false
}
func (_TypeDefn__Repr) IsNull() bool {
	return false
}
func (_TypeDefn__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsBool()
}
func (_TypeDefn__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsInt()
}
func (_TypeDefn__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsFloat()
}
func (_TypeDefn__Repr) AsString() (string, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsString()
}
func (_TypeDefn__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsBytes()
}
func (_TypeDefn__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.TypeDefn.Repr"}.AsLink()
}
func (_TypeDefn__Repr) Prototype() ipld.NodePrototype {
	return _TypeDefn__ReprPrototype{}
}
type _TypeDefn__ReprPrototype struct{}

func (_TypeDefn__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _TypeDefn__ReprBuilder
	nb.Reset()
	return &nb
}
type _TypeDefn__ReprBuilder struct {
	_TypeDefn__ReprAssembler
}
func (nb *_TypeDefn__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TypeDefn__ReprBuilder) Reset() {
	var w _TypeDefn
	var m schema.Maybe
	*nb = _TypeDefn__ReprBuilder{_TypeDefn__ReprAssembler{w: &w, m: &m}}
}
type _TypeDefn__ReprAssembler struct {
	w *_TypeDefn
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 _TypeBool__ReprAssembler
	
	ca2 _TypeString__ReprAssembler
	
	ca3 _TypeBytes__ReprAssembler
	
	ca4 _TypeInt__ReprAssembler
	
	ca5 _TypeFloat__ReprAssembler
	
	ca6 _TypeMap__ReprAssembler
	
	ca7 _TypeList__ReprAssembler
	
	ca8 _TypeLink__ReprAssembler
	
	ca9 _TypeUnion__ReprAssembler
	
	ca10 _TypeStruct__ReprAssembler
	
	ca11 _TypeEnum__ReprAssembler
	
	ca12 _TypeCopy__ReprAssembler
	ca uint
}
func (na *_TypeDefn__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	
	case 8:
		na.ca8.reset()
	
	case 9:
		na.ca9.reset()
	
	case 10:
		na.ca10.reset()
	
	case 11:
		na.ca11.reset()
	
	case 12:
		na.ca12.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_TypeDefn__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TypeDefn{}
	}
	return na, nil
}
func (_TypeDefn__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.BeginList(0)
}
func (na *_TypeDefn__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.TypeDefn.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TypeDefn__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignBool(false)
}
func (_TypeDefn__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignInt(0)
}
func (_TypeDefn__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignFloat(0)
}
func (_TypeDefn__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignString("")
}
func (_TypeDefn__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignBytes(nil)
}
func (_TypeDefn__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.TypeDefn.Repr"}.AssignLink(nil)
}
func (na *_TypeDefn__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TypeDefn); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.TypeDefn.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TypeDefn__ReprAssembler) Prototype() ipld.NodePrototype {
	return _TypeDefn__ReprPrototype{}
}
func (ma *_TypeDefn__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_TypeDefn__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "string":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "bytes":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "int":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "float":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	case "map":
		ma.state = maState_midValue
		ma.ca = 6
		ma.w.tag = 6
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6, nil
	case "list":
		ma.state = maState_midValue
		ma.ca = 7
		ma.w.tag = 7
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7, nil
	case "link":
		ma.state = maState_midValue
		ma.ca = 8
		ma.w.tag = 8
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8, nil
	case "union":
		ma.state = maState_midValue
		ma.ca = 9
		ma.w.tag = 9
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9, nil
	case "struct":
		ma.state = maState_midValue
		ma.ca = 10
		ma.w.tag = 10
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10, nil
	case "enum":
		ma.state = maState_midValue
		ma.ca = 11
		ma.w.tag = 11
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11, nil
	case "copy":
		ma.state = maState_midValue
		ma.ca = 12
		ma.w.tag = 12
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.TypeDefn.Repr", Key:&_String{k}}
	}
}
func (ma *_TypeDefn__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TypeDefn__ReprKeyAssembler)(ma)
}
func (ma *_TypeDefn__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	case 5:
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6
	case 6:
		ma.ca7.w = &ma.w.x7
		ma.ca7.m = &ma.cm
		return &ma.ca7
	case 7:
		ma.ca8.w = &ma.w.x8
		ma.ca8.m = &ma.cm
		return &ma.ca8
	case 8:
		ma.ca9.w = &ma.w.x9
		ma.ca9.m = &ma.cm
		return &ma.ca9
	case 9:
		ma.ca10.w = &ma.w.x10
		ma.ca10.m = &ma.cm
		return &ma.ca10
	case 10:
		ma.ca11.w = &ma.w.x11
		ma.ca11.m = &ma.cm
		return &ma.ca11
	case 11:
		ma.ca12.w = &ma.w.x12
		ma.ca12.m = &ma.cm
		return &ma.ca12
	default:
		panic("unreachable")
	}
}
func (ma *_TypeDefn__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TypeDefn__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TypeDefn__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "TypeBool":
		return _TypeBool__ReprPrototype{}
	case "TypeString":
		return _TypeString__ReprPrototype{}
	case "TypeBytes":
		return _TypeBytes__ReprPrototype{}
	case "TypeInt":
		return _TypeInt__ReprPrototype{}
	case "TypeFloat":
		return _TypeFloat__ReprPrototype{}
	case "TypeMap":
		return _TypeMap__ReprPrototype{}
	case "TypeList":
		return _TypeList__ReprPrototype{}
	case "TypeLink":
		return _TypeLink__ReprPrototype{}
	case "TypeUnion":
		return _TypeUnion__ReprPrototype{}
	case "TypeStruct":
		return _TypeStruct__ReprPrototype{}
	case "TypeEnum":
		return _TypeEnum__ReprPrototype{}
	case "TypeCopy":
		return _TypeCopy__ReprPrototype{}
	default:
		return nil
	}
}
type _TypeDefn__ReprKeyAssembler _TypeDefn__ReprAssembler
func (_TypeDefn__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.BeginMap(0)
}
func (_TypeDefn__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_TypeDefn__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignNull()
}
func (_TypeDefn__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignBool(false)
}
func (_TypeDefn__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignInt(0)
}
func (_TypeDefn__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TypeDefn__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"schema.TypeDefn.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "string":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "bytes":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "int":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "float":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	case "map":
		ka.ca = 6
		ka.w.tag = 6
		ka.state = maState_expectValue
		return nil
	case "list":
		ka.ca = 7
		ka.w.tag = 7
		ka.state = maState_expectValue
		return nil
	case "link":
		ka.ca = 8
		ka.w.tag = 8
		ka.state = maState_expectValue
		return nil
	case "union":
		ka.ca = 9
		ka.w.tag = 9
		ka.state = maState_expectValue
		return nil
	case "struct":
		ka.ca = 10
		ka.w.tag = 10
		ka.state = maState_expectValue
		return nil
	case "enum":
		ka.ca = 11
		ka.w.tag = 11
		ka.state = maState_expectValue
		return nil
	case "copy":
		ka.ca = 12
		ka.w.tag = 12
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.TypeDefn.Repr", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_TypeDefn__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_TypeDefn__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.TypeDefn.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TypeDefn__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TypeDefn__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
