package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _StructRepresentation_StringJoin struct {
	join _String
	fieldOrder _List__FieldName__Maybe
}
type StructRepresentation_StringJoin = *_StructRepresentation_StringJoin

func (n _StructRepresentation_StringJoin) FieldJoin()	String {
	return &n.join
}
func (n _StructRepresentation_StringJoin) FieldFieldOrder()	MaybeList__FieldName {
	return &n.fieldOrder
}
type _StructRepresentation_StringJoin__Maybe struct {
	m schema.Maybe
	v StructRepresentation_StringJoin
}
type MaybeStructRepresentation_StringJoin = *_StructRepresentation_StringJoin__Maybe

func (m MaybeStructRepresentation_StringJoin) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeStructRepresentation_StringJoin) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeStructRepresentation_StringJoin) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeStructRepresentation_StringJoin) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeStructRepresentation_StringJoin) Must() StructRepresentation_StringJoin {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__StructRepresentation_StringJoin_Join = _String{"join"}
	fieldName__StructRepresentation_StringJoin_FieldOrder = _String{"fieldOrder"}
)
var _ ipld.Node = (StructRepresentation_StringJoin)(&_StructRepresentation_StringJoin{})
var _ schema.TypedNode = (StructRepresentation_StringJoin)(&_StructRepresentation_StringJoin{})
func (StructRepresentation_StringJoin) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n StructRepresentation_StringJoin) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "join":
		return &n.join, nil
	case "fieldOrder":
		if n.fieldOrder.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.fieldOrder.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n StructRepresentation_StringJoin) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (StructRepresentation_StringJoin) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.LookupByIndex(0)
}
func (n StructRepresentation_StringJoin) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n StructRepresentation_StringJoin) MapIterator() ipld.MapIterator {
	return &_StructRepresentation_StringJoin__MapItr{n, 0}
}

type _StructRepresentation_StringJoin__MapItr struct {
	n StructRepresentation_StringJoin
	idx  int
}

func (itr *_StructRepresentation_StringJoin__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__StructRepresentation_StringJoin_Join
		v = &itr.n.join
	case 1:
		k = &fieldName__StructRepresentation_StringJoin_FieldOrder
		if itr.n.fieldOrder.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.fieldOrder.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_StructRepresentation_StringJoin__MapItr) Done() bool {
	return itr.idx >= 2
}

func (StructRepresentation_StringJoin) ListIterator() ipld.ListIterator {
	return nil
}
func (StructRepresentation_StringJoin) Length() int {
	return 2
}
func (StructRepresentation_StringJoin) IsAbsent() bool {
	return false
}
func (StructRepresentation_StringJoin) IsNull() bool {
	return false
}
func (StructRepresentation_StringJoin) AsBool() (bool, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsBool()
}
func (StructRepresentation_StringJoin) AsInt() (int, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsInt()
}
func (StructRepresentation_StringJoin) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsFloat()
}
func (StructRepresentation_StringJoin) AsString() (string, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsString()
}
func (StructRepresentation_StringJoin) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsBytes()
}
func (StructRepresentation_StringJoin) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin"}.AsLink()
}
func (StructRepresentation_StringJoin) Prototype() ipld.NodePrototype {
	return _StructRepresentation_StringJoin__Prototype{}
}
type _StructRepresentation_StringJoin__Prototype struct{}

func (_StructRepresentation_StringJoin__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructRepresentation_StringJoin__Builder
	nb.Reset()
	return &nb
}
type _StructRepresentation_StringJoin__Builder struct {
	_StructRepresentation_StringJoin__Assembler
}
func (nb *_StructRepresentation_StringJoin__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructRepresentation_StringJoin__Builder) Reset() {
	var w _StructRepresentation_StringJoin
	var m schema.Maybe
	*nb = _StructRepresentation_StringJoin__Builder{_StructRepresentation_StringJoin__Assembler{w: &w, m: &m}}
}
type _StructRepresentation_StringJoin__Assembler struct {
	w *_StructRepresentation_StringJoin
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_join _String__Assembler
	ca_fieldOrder _List__FieldName__Assembler
	}

func (na *_StructRepresentation_StringJoin__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_join.reset()
	na.ca_fieldOrder.reset()
}

var (
	fieldBit__StructRepresentation_StringJoin_Join = 1 << 0
	fieldBit__StructRepresentation_StringJoin_FieldOrder = 1 << 1
	fieldBits__StructRepresentation_StringJoin_sufficient = 0 + 1 << 0
)
func (na *_StructRepresentation_StringJoin__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructRepresentation_StringJoin{}
	}
	return na, nil
}
func (_StructRepresentation_StringJoin__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.BeginList(0)
}
func (na *_StructRepresentation_StringJoin__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructRepresentation_StringJoin__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignBool(false)
}
func (_StructRepresentation_StringJoin__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignInt(0)
}
func (_StructRepresentation_StringJoin__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignFloat(0)
}
func (_StructRepresentation_StringJoin__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignString("")
}
func (_StructRepresentation_StringJoin__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignBytes(nil)
}
func (_StructRepresentation_StringJoin__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin"}.AssignLink(nil)
}
func (na *_StructRepresentation_StringJoin__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructRepresentation_StringJoin); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructRepresentation_StringJoin", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructRepresentation_StringJoin__Assembler) Prototype() ipld.NodePrototype {
	return _StructRepresentation_StringJoin__Prototype{}
}
func (ma *_StructRepresentation_StringJoin__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_join.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.fieldOrder.m {
		case schema.Maybe_Value:
			ma.w.fieldOrder.v = ma.ca_fieldOrder.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation_StringJoin__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "join":
		if ma.s & fieldBit__StructRepresentation_StringJoin_Join != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_Join}
		}
		ma.s += fieldBit__StructRepresentation_StringJoin_Join
		ma.state = maState_midValue
		ma.ca_join.w = &ma.w.join
		ma.ca_join.m = &ma.cm
		return &ma.ca_join, nil
	case "fieldOrder":
		if ma.s & fieldBit__StructRepresentation_StringJoin_FieldOrder != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_FieldOrder}
		}
		ma.s += fieldBit__StructRepresentation_StringJoin_FieldOrder
		ma.state = maState_midValue
		ma.ca_fieldOrder.w = ma.w.fieldOrder.v
		ma.ca_fieldOrder.m = &ma.w.fieldOrder.m
		
		return &ma.ca_fieldOrder, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation_StringJoin", Key:&_String{k}}
	}
}
func (ma *_StructRepresentation_StringJoin__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructRepresentation_StringJoin__KeyAssembler)(ma)
}
func (ma *_StructRepresentation_StringJoin__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_join.w = &ma.w.join
		ma.ca_join.m = &ma.cm
		return &ma.ca_join
	case 1:
		ma.ca_fieldOrder.w = ma.w.fieldOrder.v
		ma.ca_fieldOrder.m = &ma.w.fieldOrder.m
		
		return &ma.ca_fieldOrder
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation_StringJoin__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructRepresentation_StringJoin__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructRepresentation_StringJoin__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _StructRepresentation_StringJoin__KeyAssembler _StructRepresentation_StringJoin__Assembler
func (_StructRepresentation_StringJoin__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.BeginMap(0)
}
func (_StructRepresentation_StringJoin__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.BeginList(0)
}
func (na *_StructRepresentation_StringJoin__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignNull()
}
func (_StructRepresentation_StringJoin__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignBool(false)
}
func (_StructRepresentation_StringJoin__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignInt(0)
}
func (_StructRepresentation_StringJoin__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructRepresentation_StringJoin__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "join":
		if ka.s & fieldBit__StructRepresentation_StringJoin_Join != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_Join}
		}
		ka.s += fieldBit__StructRepresentation_StringJoin_Join
		ka.state = maState_expectValue
		ka.f = 0
	case "fieldOrder":
		if ka.s & fieldBit__StructRepresentation_StringJoin_FieldOrder != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_FieldOrder}
		}
		ka.s += fieldBit__StructRepresentation_StringJoin_FieldOrder
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation_StringJoin", Key:&_String{k}}
	}
	return nil
}
func (_StructRepresentation_StringJoin__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignBytes(nil)
}
func (_StructRepresentation_StringJoin__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructRepresentation_StringJoin__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructRepresentation_StringJoin__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (StructRepresentation_StringJoin) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n StructRepresentation_StringJoin) Representation() ipld.Node {
	return (*_StructRepresentation_StringJoin__Repr)(n)
}
type _StructRepresentation_StringJoin__Repr _StructRepresentation_StringJoin
var (
	fieldName__StructRepresentation_StringJoin_Join_serial = _String{"join"}
	fieldName__StructRepresentation_StringJoin_FieldOrder_serial = _String{"fieldOrder"}
)
var _ ipld.Node = &_StructRepresentation_StringJoin__Repr{}
func (_StructRepresentation_StringJoin__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_StructRepresentation_StringJoin__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "join":
		return n.join.Representation(), nil
	case "fieldOrder":
		if n.fieldOrder.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.fieldOrder.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_StructRepresentation_StringJoin__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_StructRepresentation_StringJoin__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.LookupByIndex(0)
}
func (n _StructRepresentation_StringJoin__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_StructRepresentation_StringJoin__Repr) MapIterator() ipld.MapIterator {
	end := 2
	if n.fieldOrder.m == schema.Maybe_Absent {
		end = 1
	} else {
		goto done
	}
done:
	return &_StructRepresentation_StringJoin__ReprMapItr{n, 0, end}
}

type _StructRepresentation_StringJoin__ReprMapItr struct {
	n   *_StructRepresentation_StringJoin__Repr
	idx int
	end int
}

func (itr *_StructRepresentation_StringJoin__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
advance:if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__StructRepresentation_StringJoin_Join_serial
		v = itr.n.join.Representation()
	case 1:
		k = &fieldName__StructRepresentation_StringJoin_FieldOrder_serial
		if itr.n.fieldOrder.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.fieldOrder.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_StructRepresentation_StringJoin__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_StructRepresentation_StringJoin__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_StructRepresentation_StringJoin__Repr) Length() int {
	l := 2
	if rn.fieldOrder.m == schema.Maybe_Absent {
		l--
	}
	return l
}
func (_StructRepresentation_StringJoin__Repr) IsAbsent() bool {
	return false
}
func (_StructRepresentation_StringJoin__Repr) IsNull() bool {
	return false
}
func (_StructRepresentation_StringJoin__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsBool()
}
func (_StructRepresentation_StringJoin__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsInt()
}
func (_StructRepresentation_StringJoin__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsFloat()
}
func (_StructRepresentation_StringJoin__Repr) AsString() (string, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsString()
}
func (_StructRepresentation_StringJoin__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsBytes()
}
func (_StructRepresentation_StringJoin__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructRepresentation_StringJoin.Repr"}.AsLink()
}
func (_StructRepresentation_StringJoin__Repr) Prototype() ipld.NodePrototype {
	return _StructRepresentation_StringJoin__ReprPrototype{}
}
type _StructRepresentation_StringJoin__ReprPrototype struct{}

func (_StructRepresentation_StringJoin__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructRepresentation_StringJoin__ReprBuilder
	nb.Reset()
	return &nb
}
type _StructRepresentation_StringJoin__ReprBuilder struct {
	_StructRepresentation_StringJoin__ReprAssembler
}
func (nb *_StructRepresentation_StringJoin__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructRepresentation_StringJoin__ReprBuilder) Reset() {
	var w _StructRepresentation_StringJoin
	var m schema.Maybe
	*nb = _StructRepresentation_StringJoin__ReprBuilder{_StructRepresentation_StringJoin__ReprAssembler{w: &w, m: &m}}
}
type _StructRepresentation_StringJoin__ReprAssembler struct {
	w *_StructRepresentation_StringJoin
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_join _String__ReprAssembler
	ca_fieldOrder _List__FieldName__ReprAssembler
	}

func (na *_StructRepresentation_StringJoin__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_join.reset()
	na.ca_fieldOrder.reset()
}
func (na *_StructRepresentation_StringJoin__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructRepresentation_StringJoin{}
	}
	return na, nil
}
func (_StructRepresentation_StringJoin__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.BeginList(0)
}
func (na *_StructRepresentation_StringJoin__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignBool(false)
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignInt(0)
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignFloat(0)
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignString("")
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignBytes(nil)
}
func (_StructRepresentation_StringJoin__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructRepresentation_StringJoin.Repr"}.AssignLink(nil)
}
func (na *_StructRepresentation_StringJoin__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructRepresentation_StringJoin); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructRepresentation_StringJoin.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructRepresentation_StringJoin__ReprAssembler) Prototype() ipld.NodePrototype {
	return _StructRepresentation_StringJoin__ReprPrototype{}
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.fieldOrder.m {
		case schema.Maybe_Value:
			ma.w.fieldOrder.v = ma.ca_fieldOrder.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "join":
		if ma.s & fieldBit__StructRepresentation_StringJoin_Join != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_Join_serial}
		}
		ma.s += fieldBit__StructRepresentation_StringJoin_Join
		ma.state = maState_midValue
		ma.ca_join.w = &ma.w.join
		ma.ca_join.m = &ma.cm
		return &ma.ca_join, nil
	case "fieldOrder":
		if ma.s & fieldBit__StructRepresentation_StringJoin_FieldOrder != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_FieldOrder_serial}
		}
		ma.s += fieldBit__StructRepresentation_StringJoin_FieldOrder
		ma.state = maState_midValue
		ma.ca_fieldOrder.w = ma.w.fieldOrder.v
		ma.ca_fieldOrder.m = &ma.w.fieldOrder.m
		
		return &ma.ca_fieldOrder, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation_StringJoin.Repr", Key:&_String{k}}
	}
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructRepresentation_StringJoin__ReprKeyAssembler)(ma)
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_join.w = &ma.w.join
		ma.ca_join.m = &ma.cm
		return &ma.ca_join
	case 1:
		ma.ca_fieldOrder.w = ma.w.fieldOrder.v
		ma.ca_fieldOrder.m = &ma.w.fieldOrder.m
		
		return &ma.ca_fieldOrder
	default:
		panic("unreachable")
	}
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructRepresentation_StringJoin__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _StructRepresentation_StringJoin__ReprKeyAssembler _StructRepresentation_StringJoin__ReprAssembler
func (_StructRepresentation_StringJoin__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.BeginMap(0)
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_StructRepresentation_StringJoin__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignNull()
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignBool(false)
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignInt(0)
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructRepresentation_StringJoin__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "join":
		if ka.s & fieldBit__StructRepresentation_StringJoin_Join != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_Join_serial}
		}
		ka.s += fieldBit__StructRepresentation_StringJoin_Join
		ka.state = maState_expectValue
		ka.f = 0
	case "fieldOrder":
		if ka.s & fieldBit__StructRepresentation_StringJoin_FieldOrder != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructRepresentation_StringJoin_FieldOrder_serial}
		}
		ka.s += fieldBit__StructRepresentation_StringJoin_FieldOrder
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructRepresentation_StringJoin.Repr", Key:&_String{k}}
	}
	return nil
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructRepresentation_StringJoin.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructRepresentation_StringJoin__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructRepresentation_StringJoin__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
