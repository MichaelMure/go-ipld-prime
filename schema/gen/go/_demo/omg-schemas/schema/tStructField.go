package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _StructField struct {
	typ _TypeDefnInline
	optional _Bool
	nullable _Bool
}
type StructField = *_StructField

func (n _StructField) FieldTyp()	TypeDefnInline {
	return &n.typ
}
func (n _StructField) FieldOptional()	Bool {
	return &n.optional
}
func (n _StructField) FieldNullable()	Bool {
	return &n.nullable
}
type _StructField__Maybe struct {
	m schema.Maybe
	v StructField
}
type MaybeStructField = *_StructField__Maybe

func (m MaybeStructField) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeStructField) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeStructField) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeStructField) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeStructField) Must() StructField {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__StructField_Typ = _String{"typ"}
	fieldName__StructField_Optional = _String{"optional"}
	fieldName__StructField_Nullable = _String{"nullable"}
)
var _ ipld.Node = (StructField)(&_StructField{})
var _ schema.TypedNode = (StructField)(&_StructField{})
func (StructField) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n StructField) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "typ":
		return &n.typ, nil
	case "optional":
		return &n.optional, nil
	case "nullable":
		return &n.nullable, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n StructField) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (StructField) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructField"}.LookupByIndex(0)
}
func (n StructField) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n StructField) MapIterator() ipld.MapIterator {
	return &_StructField__MapItr{n, 0}
}

type _StructField__MapItr struct {
	n StructField
	idx  int
}

func (itr *_StructField__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__StructField_Typ
		v = &itr.n.typ
	case 1:
		k = &fieldName__StructField_Optional
		v = &itr.n.optional
	case 2:
		k = &fieldName__StructField_Nullable
		v = &itr.n.nullable
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_StructField__MapItr) Done() bool {
	return itr.idx >= 3
}

func (StructField) ListIterator() ipld.ListIterator {
	return nil
}
func (StructField) Length() int {
	return 3
}
func (StructField) IsAbsent() bool {
	return false
}
func (StructField) IsNull() bool {
	return false
}
func (StructField) AsBool() (bool, error) {
	return mixins.Map{"schema.StructField"}.AsBool()
}
func (StructField) AsInt() (int, error) {
	return mixins.Map{"schema.StructField"}.AsInt()
}
func (StructField) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructField"}.AsFloat()
}
func (StructField) AsString() (string, error) {
	return mixins.Map{"schema.StructField"}.AsString()
}
func (StructField) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructField"}.AsBytes()
}
func (StructField) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructField"}.AsLink()
}
func (StructField) Prototype() ipld.NodePrototype {
	return _StructField__Prototype{}
}
type _StructField__Prototype struct{}

func (_StructField__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructField__Builder
	nb.Reset()
	return &nb
}
type _StructField__Builder struct {
	_StructField__Assembler
}
func (nb *_StructField__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructField__Builder) Reset() {
	var w _StructField
	var m schema.Maybe
	*nb = _StructField__Builder{_StructField__Assembler{w: &w, m: &m}}
}
type _StructField__Assembler struct {
	w *_StructField
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_typ _TypeDefnInline__Assembler
	ca_optional _Bool__Assembler
	ca_nullable _Bool__Assembler
	}

func (na *_StructField__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_typ.reset()
	na.ca_optional.reset()
	na.ca_nullable.reset()
}

var (
	fieldBit__StructField_Typ = 1 << 0
	fieldBit__StructField_Optional = 1 << 1
	fieldBit__StructField_Nullable = 1 << 2
	fieldBits__StructField_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2
)
func (na *_StructField__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructField{}
	}
	return na, nil
}
func (_StructField__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructField"}.BeginList(0)
}
func (na *_StructField__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructField"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructField__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignBool(false)
}
func (_StructField__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignInt(0)
}
func (_StructField__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignFloat(0)
}
func (_StructField__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignString("")
}
func (_StructField__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignBytes(nil)
}
func (_StructField__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructField"}.AssignLink(nil)
}
func (na *_StructField__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructField); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructField", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructField__Assembler) Prototype() ipld.NodePrototype {
	return _StructField__Prototype{}
}
func (ma *_StructField__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_typ.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_optional.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_nullable.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_StructField__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "typ":
		if ma.s & fieldBit__StructField_Typ != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Typ}
		}
		ma.s += fieldBit__StructField_Typ
		ma.state = maState_midValue
		ma.ca_typ.w = &ma.w.typ
		ma.ca_typ.m = &ma.cm
		return &ma.ca_typ, nil
	case "optional":
		if ma.s & fieldBit__StructField_Optional != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Optional}
		}
		ma.s += fieldBit__StructField_Optional
		ma.state = maState_midValue
		ma.ca_optional.w = &ma.w.optional
		ma.ca_optional.m = &ma.cm
		return &ma.ca_optional, nil
	case "nullable":
		if ma.s & fieldBit__StructField_Nullable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Nullable}
		}
		ma.s += fieldBit__StructField_Nullable
		ma.state = maState_midValue
		ma.ca_nullable.w = &ma.w.nullable
		ma.ca_nullable.m = &ma.cm
		return &ma.ca_nullable, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructField", Key:&_String{k}}
	}
}
func (ma *_StructField__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructField__KeyAssembler)(ma)
}
func (ma *_StructField__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_typ.w = &ma.w.typ
		ma.ca_typ.m = &ma.cm
		return &ma.ca_typ
	case 1:
		ma.ca_optional.w = &ma.w.optional
		ma.ca_optional.m = &ma.cm
		return &ma.ca_optional
	case 2:
		ma.ca_nullable.w = &ma.w.nullable
		ma.ca_nullable.m = &ma.cm
		return &ma.ca_nullable
	default:
		panic("unreachable")
	}
}
func (ma *_StructField__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructField__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructField__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _StructField__KeyAssembler _StructField__Assembler
func (_StructField__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.BeginMap(0)
}
func (_StructField__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.BeginList(0)
}
func (na *_StructField__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignNull()
}
func (_StructField__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignBool(false)
}
func (_StructField__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignInt(0)
}
func (_StructField__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructField__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "typ":
		if ka.s & fieldBit__StructField_Typ != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Typ}
		}
		ka.s += fieldBit__StructField_Typ
		ka.state = maState_expectValue
		ka.f = 0
	case "optional":
		if ka.s & fieldBit__StructField_Optional != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Optional}
		}
		ka.s += fieldBit__StructField_Optional
		ka.state = maState_expectValue
		ka.f = 1
	case "nullable":
		if ka.s & fieldBit__StructField_Nullable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Nullable}
		}
		ka.s += fieldBit__StructField_Nullable
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructField", Key:&_String{k}}
	}
	return nil
}
func (_StructField__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignBytes(nil)
}
func (_StructField__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructField.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructField__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructField__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (StructField) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n StructField) Representation() ipld.Node {
	return (*_StructField__Repr)(n)
}
type _StructField__Repr _StructField
var (
	fieldName__StructField_Typ_serial = _String{"typ"}
	fieldName__StructField_Optional_serial = _String{"optional"}
	fieldName__StructField_Nullable_serial = _String{"nullable"}
)
var _ ipld.Node = &_StructField__Repr{}
func (_StructField__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_StructField__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "typ":
		return n.typ.Representation(), nil
	case "optional":
		return n.optional.Representation(), nil
	case "nullable":
		return n.nullable.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, FieldName: key}
	}
}
func (n *_StructField__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_StructField__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"schema.StructField.Repr"}.LookupByIndex(0)
}
func (n _StructField__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_StructField__Repr) MapIterator() ipld.MapIterator {
	return &_StructField__ReprMapItr{n, 0}
}

type _StructField__ReprMapItr struct {
	n   *_StructField__Repr
	idx int
	
}

func (itr *_StructField__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__StructField_Typ_serial
		v = itr.n.typ.Representation()
	case 1:
		k = &fieldName__StructField_Optional_serial
		v = itr.n.optional.Representation()
	case 2:
		k = &fieldName__StructField_Nullable_serial
		v = itr.n.nullable.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_StructField__ReprMapItr) Done() bool {
	return itr.idx >= 3
}
func (_StructField__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_StructField__Repr) Length() int {
	l := 3
	return l
}
func (_StructField__Repr) IsAbsent() bool {
	return false
}
func (_StructField__Repr) IsNull() bool {
	return false
}
func (_StructField__Repr) AsBool() (bool, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsBool()
}
func (_StructField__Repr) AsInt() (int, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsInt()
}
func (_StructField__Repr) AsFloat() (float64, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsFloat()
}
func (_StructField__Repr) AsString() (string, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsString()
}
func (_StructField__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsBytes()
}
func (_StructField__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"schema.StructField.Repr"}.AsLink()
}
func (_StructField__Repr) Prototype() ipld.NodePrototype {
	return _StructField__ReprPrototype{}
}
type _StructField__ReprPrototype struct{}

func (_StructField__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _StructField__ReprBuilder
	nb.Reset()
	return &nb
}
type _StructField__ReprBuilder struct {
	_StructField__ReprAssembler
}
func (nb *_StructField__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_StructField__ReprBuilder) Reset() {
	var w _StructField
	var m schema.Maybe
	*nb = _StructField__ReprBuilder{_StructField__ReprAssembler{w: &w, m: &m}}
}
type _StructField__ReprAssembler struct {
	w *_StructField
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_typ _TypeDefnInline__ReprAssembler
	ca_optional _Bool__ReprAssembler
	ca_nullable _Bool__ReprAssembler
	}

func (na *_StructField__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_typ.reset()
	na.ca_optional.reset()
	na.ca_nullable.reset()
}
func (na *_StructField__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_StructField{}
	}
	return na, nil
}
func (_StructField__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"schema.StructField.Repr"}.BeginList(0)
}
func (na *_StructField__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"schema.StructField.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_StructField__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignBool(false)
}
func (_StructField__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignInt(0)
}
func (_StructField__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignFloat(0)
}
func (_StructField__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignString("")
}
func (_StructField__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignBytes(nil)
}
func (_StructField__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"schema.StructField.Repr"}.AssignLink(nil)
}
func (na *_StructField__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_StructField); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "schema.StructField.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_StructField__ReprAssembler) Prototype() ipld.NodePrototype {
	return _StructField__ReprPrototype{}
}
func (ma *_StructField__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_StructField__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "typ":
		if ma.s & fieldBit__StructField_Typ != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Typ_serial}
		}
		ma.s += fieldBit__StructField_Typ
		ma.state = maState_midValue
		ma.ca_typ.w = &ma.w.typ
		ma.ca_typ.m = &ma.cm
		return &ma.ca_typ, nil
	case "optional":
		if ma.s & fieldBit__StructField_Optional != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Optional_serial}
		}
		ma.s += fieldBit__StructField_Optional
		ma.state = maState_midValue
		ma.ca_optional.w = &ma.w.optional
		ma.ca_optional.m = &ma.cm
		return &ma.ca_optional, nil
	case "nullable":
		if ma.s & fieldBit__StructField_Nullable != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__StructField_Nullable_serial}
		}
		ma.s += fieldBit__StructField_Nullable
		ma.state = maState_midValue
		ma.ca_nullable.w = &ma.w.nullable
		ma.ca_nullable.m = &ma.cm
		return &ma.ca_nullable, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"schema.StructField.Repr", Key:&_String{k}}
	}
}
func (ma *_StructField__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_StructField__ReprKeyAssembler)(ma)
}
func (ma *_StructField__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_typ.w = &ma.w.typ
		ma.ca_typ.m = &ma.cm
		return &ma.ca_typ
	case 1:
		ma.ca_optional.w = &ma.w.optional
		ma.ca_optional.m = &ma.cm
		return &ma.ca_optional
	case 2:
		ma.ca_nullable.w = &ma.w.nullable
		ma.ca_nullable.m = &ma.cm
		return &ma.ca_nullable
	default:
		panic("unreachable")
	}
}
func (ma *_StructField__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_StructField__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_StructField__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _StructField__ReprKeyAssembler _StructField__ReprAssembler
func (_StructField__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.BeginMap(0)
}
func (_StructField__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_StructField__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignNull()
}
func (_StructField__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignBool(false)
}
func (_StructField__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignInt(0)
}
func (_StructField__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_StructField__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "typ":
		if ka.s & fieldBit__StructField_Typ != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Typ_serial}
		}
		ka.s += fieldBit__StructField_Typ
		ka.state = maState_expectValue
		ka.f = 0
	case "optional":
		if ka.s & fieldBit__StructField_Optional != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Optional_serial}
		}
		ka.s += fieldBit__StructField_Optional
		ka.state = maState_expectValue
		ka.f = 1
	case "nullable":
		if ka.s & fieldBit__StructField_Nullable != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__StructField_Nullable_serial}
		}
		ka.s += fieldBit__StructField_Nullable
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName:"schema.StructField.Repr", Key:&_String{k}}
	}
	return nil
}
func (_StructField__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_StructField__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"schema.StructField.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_StructField__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_StructField__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
